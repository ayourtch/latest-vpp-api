/*
   Autogenerated Data, Do not Edit!
*/
#![allow(dead_code,unused_mut,unused_variables,unused_must_use,non_camel_case_types,unused_imports,non_snake_case)]
use vpp_api_macros::{VppMessage,VppUnionIdent};
use std::convert::TryInto;
use serde::{de::DeserializeOwned, Deserialize, Serialize};
pub use vpp_api_encoding::typ::*;
pub use vpp_api_encoding;
use vpp_api_message::VppApiMessage;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum;
use crate::ip_types::*;
use crate::tunnel_types::*;
use crate::interface_types::*;
// Implementation for ipip_tunnel
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct IpipTunnel {
	pub instance : u32,
	pub src : Address,
	pub dst : Address,
	pub sw_if_index : InterfaceIndex,
	pub table_id : u32,
	pub flags : EnumFlag<TunnelEncapDecapFlags>,
	pub mode : TunnelMode,
	pub dscp : IpDscp,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(ipip_add_tunnel_2ac399f5)]
pub struct IpipAddTunnel {
	pub client_index : u32,
	pub context : u32,
	pub tunnel : IpipTunnel,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(ipip_add_tunnel_reply_5383d31f)]
pub struct IpipAddTunnelReply {
	pub context : u32,
	pub retval : i32,
	pub sw_if_index : InterfaceIndex,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(ipip_del_tunnel_f9e6675e)]
pub struct IpipDelTunnel {
	pub client_index : u32,
	pub context : u32,
	pub sw_if_index : InterfaceIndex,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(ipip_del_tunnel_reply_e8d4e804)]
pub struct IpipDelTunnelReply {
	pub context : u32,
	pub retval : i32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(ipip_6rd_add_tunnel_b9ec1863)]
pub struct Ipip6rdAddTunnel {
	pub client_index : u32,
	pub context : u32,
	pub ip6_table_id : u32,
	pub ip4_table_id : u32,
	pub ip6_prefix : Ip6Prefix,
	pub ip4_prefix : Ip4Prefix,
	pub ip4_src : Ip4Address,
	pub security_check : bool,
	pub tc_tos : u8,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(ipip_6rd_add_tunnel_reply_5383d31f)]
pub struct Ipip6rdAddTunnelReply {
	pub context : u32,
	pub retval : i32,
	pub sw_if_index : InterfaceIndex,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(ipip_6rd_del_tunnel_f9e6675e)]
pub struct Ipip6rdDelTunnel {
	pub client_index : u32,
	pub context : u32,
	pub sw_if_index : InterfaceIndex,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(ipip_6rd_del_tunnel_reply_e8d4e804)]
pub struct Ipip6rdDelTunnelReply {
	pub context : u32,
	pub retval : i32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(ipip_tunnel_dump_f9e6675e)]
pub struct IpipTunnelDump {
	pub client_index : u32,
	pub context : u32,
	pub sw_if_index : InterfaceIndex,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(ipip_tunnel_details_d31cb34e)]
pub struct IpipTunnelDetails {
	pub context : u32,
	pub tunnel : IpipTunnel,
}
