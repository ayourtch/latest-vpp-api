/*
   Autogenerated Data, Do not Edit!
*/
#![allow(dead_code,unused_mut,unused_variables,unused_must_use,non_camel_case_types,unused_imports,non_snake_case)]
use vpp_api_macros::{VppMessage,VppUnionIdent};
use std::convert::TryInto;
use serde::{de::DeserializeOwned, Deserialize, Serialize};
pub use vpp_api_encoding::typ::*;
pub use vpp_api_encoding;
use vpp_api_message::VppApiMessage;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum;
#[derive(Debug, Serialize, Deserialize, Clone, Copy, PartialEq)]
pub enum TraceFilterFlag {
	 TRACE_FF_NONE=0,
	 TRACE_FF_INCLUDE_NODE=1,
	 TRACE_FF_EXCLUDE_NODE=2,
	 TRACE_FF_INCLUDE_CLASSIFIER=3,
	 TRACE_FF_EXCLUDE_CLASSIFIER=4,
}
impl Default for TraceFilterFlag {
	fn default() -> Self { TraceFilterFlag::TRACE_FF_NONE }
}
impl AsEnumFlag for TraceFilterFlag {
	 fn as_u32(data: &Self) -> u32{
		 *data as u32
	 }
	 fn from_u32(data: u32) -> Self{
		 match data{
			 0 => TraceFilterFlag::TRACE_FF_NONE,
			 1 => TraceFilterFlag::TRACE_FF_INCLUDE_NODE,
			 2 => TraceFilterFlag::TRACE_FF_EXCLUDE_NODE,
			 3 => TraceFilterFlag::TRACE_FF_INCLUDE_CLASSIFIER,
			 4 => TraceFilterFlag::TRACE_FF_EXCLUDE_CLASSIFIER,
			_ => panic!("Invalid Enum Descriminant")
		 }
	 }
	 fn size_of_enum_flag() -> u32{
		 32 as u32
	}
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(trace_set_filters_f522b44a)]
pub struct TraceSetFilters {
	pub client_index: u32,
	pub context: u32,
	 pub flag: EnumFlag<TraceFilterFlag>,
	pub count: u32,
	pub node_index: u32,
	pub classifier_table_index: u32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(trace_set_filters_reply_e8d4e804)]
pub struct TraceSetFiltersReply {
	pub context: u32,
	pub retval: i32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(trace_capture_packets_9e791a9b)]
pub struct TraceCapturePackets {
	pub client_index: u32,
	pub context: u32,
	pub node_index: u32,
	pub max_packets: u32,
	pub use_filter: bool,
	pub verbose: bool,
	pub pre_capture_clear: bool,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(trace_capture_packets_reply_e8d4e804)]
pub struct TraceCapturePacketsReply {
	pub context: u32,
	pub retval: i32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(trace_clear_capture_51077d14)]
pub struct TraceClearCapture {
	pub client_index: u32,
	pub context: u32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(trace_clear_capture_reply_e8d4e804)]
pub struct TraceClearCaptureReply {
	pub context: u32,
	pub retval: i32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(trace_dump_c7d6681f)]
pub struct TraceDump {
	pub client_index: u32,
	pub context: u32,
	pub clear_cache: u8,
	pub thread_id: u32,
	pub position: u32,
	pub max_records: u32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(trace_dump_reply_e0e87f9d)]
pub struct TraceDumpReply {
	pub context: u32,
	pub retval: i32,
	pub last_thread_id: u32,
	pub last_position: u32,
	pub more_this_thread: u8,
	pub more_threads: u8,
	pub flush_only: u8,
	pub done: u8,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(trace_details_1553e9eb)]
pub struct TraceDetails {
	pub client_index: u32,
	pub context: u32,
	pub thread_id: u32,
	pub position: u32,
	pub more_this_thread: u8,
	pub more_threads: u8,
	pub done: u8,
	pub packet_number: u32,
	pub trace_data: VariableSizeString,
}
