/*
   Autogenerated Data, Do not Edit!
*/
#![allow(dead_code,unused_mut,unused_variables,unused_must_use,non_camel_case_types,unused_imports,non_snake_case)]
use vpp_api_macros::{VppMessage,VppUnionIdent};
use std::convert::TryInto;
use serde::{de::DeserializeOwned, Deserialize, Serialize};
pub use vpp_api_encoding::typ::*;
pub use vpp_api_encoding;
use vpp_api_message::VppApiMessage;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum;
use crate::ip_types::*;
use crate::interface_types::*;
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(gtpu_add_del_tunnel_ca983a2b)]
pub struct GtpuAddDelTunnel {
	pub client_index: u32,
	pub context: u32,
	pub is_add: bool,
	pub src_address: Address,
	pub dst_address: Address,
	pub mcast_sw_if_index: InterfaceIndex,
	pub encap_vrf_id: u32,
	pub decap_next_index: u32,
	pub teid: u32,
	pub tteid: u32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(gtpu_add_del_tunnel_reply_5383d31f)]
pub struct GtpuAddDelTunnelReply {
	pub context: u32,
	pub retval: i32,
	pub sw_if_index: InterfaceIndex,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(gtpu_tunnel_update_tteid_79f33816)]
pub struct GtpuTunnelUpdateTteid {
	pub client_index: u32,
	pub context: u32,
	pub dst_address: Address,
	pub encap_vrf_id: u32,
	pub teid: u32,
	pub tteid: u32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(gtpu_tunnel_update_tteid_reply_e8d4e804)]
pub struct GtpuTunnelUpdateTteidReply {
	pub context: u32,
	pub retval: i32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(gtpu_tunnel_dump_f9e6675e)]
pub struct GtpuTunnelDump {
	pub client_index: u32,
	pub context: u32,
	pub sw_if_index: InterfaceIndex,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(gtpu_tunnel_details_27f434ae)]
pub struct GtpuTunnelDetails {
	pub context: u32,
	pub sw_if_index: InterfaceIndex,
	pub src_address: Address,
	pub dst_address: Address,
	pub mcast_sw_if_index: InterfaceIndex,
	pub encap_vrf_id: u32,
	pub decap_next_index: u32,
	pub teid: u32,
	pub tteid: u32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(sw_interface_set_gtpu_bypass_65247409)]
pub struct SwInterfaceSetGtpuBypass {
	pub client_index: u32,
	pub context: u32,
	pub sw_if_index: InterfaceIndex,
	pub is_ipv6: bool,
	pub enable: bool,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(sw_interface_set_gtpu_bypass_reply_e8d4e804)]
pub struct SwInterfaceSetGtpuBypassReply {
	pub context: u32,
	pub retval: i32,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(gtpu_offload_rx_f0b08786)]
pub struct GtpuOffloadRx {
	pub client_index: u32,
	pub context: u32,
	pub hw_if_index: u32,
	pub sw_if_index: u32,
	pub enable: u8,
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)]
#[message_name_and_crc(gtpu_offload_rx_reply_e8d4e804)]
pub struct GtpuOffloadRxReply {
	pub context: u32,
	pub retval: i32,
}
