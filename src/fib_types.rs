/*
   Autogenerated Data, Do not Edit!
*/
#![allow(dead_code,unused_mut,unused_variables,unused_must_use,non_camel_case_types,unused_imports,non_snake_case)]
use vpp_api_macros::{VppMessage,VppUnionIdent};
use std::convert::TryInto;
use serde::{de::DeserializeOwned, Deserialize, Serialize};
pub use vpp_api_encoding::typ::*;
pub use vpp_api_encoding;
use vpp_api_message::VppApiMessage;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum;
use crate::ip_types::*;
// Implementation for fib_mpls_label
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct FibMplsLabel {
	pub is_uniform : u8,
	pub label : u32,
	pub ttl : u8,
	pub exp : u8,
}
// Implementation for fib_path_nh
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct FibPathNh {
	pub address : AddressUnion,
	pub via_label : u32,
	pub obj_id : u32,
	pub classify_table_index : u32,
}
// Implementation for fib_path
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct FibPath {
	pub sw_if_index : u32,
	pub table_id : u32,
	pub rpf_id : u32,
	pub weight : u8,
	pub preference : u8,
	pub typ : FibPathType,
	pub flags : EnumFlag<FibPathFlags>,
	pub proto : FibPathNhProto,
	pub nh : FibPathNh,
	pub n_labels : u8,
	pub label_stack : FixedSizeArray<FibMplsLabel, typenum::U16>,
}
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)]
#[repr(u32)]
pub enum FibPathNhProto {
	 FIB_API_PATH_NH_PROTO_IP4=0,
	 FIB_API_PATH_NH_PROTO_IP6=1,
	 FIB_API_PATH_NH_PROTO_MPLS=2,
	 FIB_API_PATH_NH_PROTO_ETHERNET=3,
	 FIB_API_PATH_NH_PROTO_BIER=4,
}
impl Default for FibPathNhProto {
	fn default() -> Self { FibPathNhProto::FIB_API_PATH_NH_PROTO_IP4 }
}
#[derive(Debug, Serialize, Deserialize, Clone, Copy, PartialEq)]
pub enum FibPathFlags {
	 FIB_API_PATH_FLAG_NONE=0,
	 FIB_API_PATH_FLAG_RESOLVE_VIA_ATTACHED=1,
	 FIB_API_PATH_FLAG_RESOLVE_VIA_HOST=2,
	 FIB_API_PATH_FLAG_POP_PW_CW=4,
}
impl Default for FibPathFlags {
	fn default() -> Self { FibPathFlags::FIB_API_PATH_FLAG_NONE }
}
impl AsEnumFlag for FibPathFlags {
	 fn as_u32(data: &Self) -> u32{
		 *data as u32
	 }
	 fn from_u32(data: u32) -> Self{
		 match data{
			 0 => FibPathFlags::FIB_API_PATH_FLAG_NONE,
			 1 => FibPathFlags::FIB_API_PATH_FLAG_RESOLVE_VIA_ATTACHED,
			 2 => FibPathFlags::FIB_API_PATH_FLAG_RESOLVE_VIA_HOST,
			 4 => FibPathFlags::FIB_API_PATH_FLAG_POP_PW_CW,
			_ => panic!("Invalid Enum Descriminant")
		 }
	 }
	 fn size_of_enum_flag() -> u32{
		 32 as u32
	}
}
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)]
#[repr(u32)]
pub enum FibPathType {
	 FIB_API_PATH_TYPE_NORMAL=0,
	 FIB_API_PATH_TYPE_LOCAL=1,
	 FIB_API_PATH_TYPE_DROP=2,
	 FIB_API_PATH_TYPE_UDP_ENCAP=3,
	 FIB_API_PATH_TYPE_BIER_IMP=4,
	 FIB_API_PATH_TYPE_ICMP_UNREACH=5,
	 FIB_API_PATH_TYPE_ICMP_PROHIBIT=6,
	 FIB_API_PATH_TYPE_SOURCE_LOOKUP=7,
	 FIB_API_PATH_TYPE_DVR=8,
	 FIB_API_PATH_TYPE_INTERFACE_RX=9,
	 FIB_API_PATH_TYPE_CLASSIFY=10,
}
impl Default for FibPathType {
	fn default() -> Self { FibPathType::FIB_API_PATH_TYPE_NORMAL }
}
