/*
   Autogenerated Data, Do not Edit! 
*/
#![allow(dead_code,unused_mut,unused_variables,unused_must_use,non_camel_case_types,unused_imports,non_snake_case)]
use vpp_api_macros::{VppMessage,VppUnionIdent}; 
use std::convert::TryInto; 
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum;
use crate::interface_types::*; 
#[derive(Debug,Serialize, Deserialize, Clone, Copy)] 
pub enum FlowprobeWhichFlags { 
	 FLOWPROBE_WHICH_FLAG_IP4=1, 
	 FLOWPROBE_WHICH_FLAG_L2=2, 
	 FLOWPROBE_WHICH_FLAG_IP6=4, 
} 
impl Default for FlowprobeWhichFlags { 
	fn default() -> Self { FlowprobeWhichFlags::FLOWPROBE_WHICH_FLAG_IP4 }
}
impl AsEnumFlag for FlowprobeWhichFlags {
	 fn as_u32(data: &Self) -> u32{
		 *data as u32
	 }
	 fn from_u32(data: u32) -> Self{
		 match data{
			 1 => FlowprobeWhichFlags::FLOWPROBE_WHICH_FLAG_IP4, 
			 2 => FlowprobeWhichFlags::FLOWPROBE_WHICH_FLAG_L2, 
			 4 => FlowprobeWhichFlags::FLOWPROBE_WHICH_FLAG_IP6, 
			_ => panic!("Invalid Enum Descriminant")
		 }
	 }
	 fn size_of_enum_flag() -> u32{
		 8 as u32
	}
}
#[derive(Debug,Serialize, Deserialize, Clone, Copy)] 
pub enum FlowprobeRecordFlags { 
	 FLOWPROBE_RECORD_FLAG_L2=1, 
	 FLOWPROBE_RECORD_FLAG_L3=2, 
	 FLOWPROBE_RECORD_FLAG_L4=4, 
} 
impl Default for FlowprobeRecordFlags { 
	fn default() -> Self { FlowprobeRecordFlags::FLOWPROBE_RECORD_FLAG_L2 }
}
impl AsEnumFlag for FlowprobeRecordFlags {
	 fn as_u32(data: &Self) -> u32{
		 *data as u32
	 }
	 fn from_u32(data: u32) -> Self{
		 match data{
			 1 => FlowprobeRecordFlags::FLOWPROBE_RECORD_FLAG_L2, 
			 2 => FlowprobeRecordFlags::FLOWPROBE_RECORD_FLAG_L3, 
			 4 => FlowprobeRecordFlags::FLOWPROBE_RECORD_FLAG_L4, 
			_ => panic!("Invalid Enum Descriminant")
		 }
	 }
	 fn size_of_enum_flag() -> u32{
		 8 as u32
	}
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(flowprobe_tx_interface_add_del_b782c976)] 
pub struct FlowprobeTxInterfaceAddDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	 pub which : EnumFlag<FlowprobeWhichFlags>, 
	pub sw_if_index : InterfaceIndex, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(flowprobe_tx_interface_add_del_reply_e8d4e804)] 
pub struct FlowprobeTxInterfaceAddDelReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(flowprobe_params_baa46c09)] 
pub struct FlowprobeParams { 
	pub client_index : u32, 
	pub context : u32, 
	 pub record_flags : EnumFlag<FlowprobeRecordFlags>, 
	pub active_timer : u32, 
	pub passive_timer : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(flowprobe_params_reply_e8d4e804)] 
pub struct FlowprobeParamsReply { 
	pub context : u32, 
	pub retval : i32, 
} 
