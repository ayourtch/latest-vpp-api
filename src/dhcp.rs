/*
   Autogenerated Data, Do not Edit! 
*/
#![allow(dead_code,unused_mut,unused_variables,unused_must_use,non_camel_case_types,unused_imports,non_snake_case)]
use vpp_api_macros::{VppMessage,VppUnionIdent}; 
use std::convert::TryInto; 
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use crate::VppNamedMessage;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum;
use crate::ip_types::*; 
use crate::interface_types::*; 
use crate::ethernet_types::*; 
// Implementation for dhcp_client 
#[derive(Debug, Clone, Serialize, Deserialize, Default)] 
pub struct DhcpClient { 
	pub sw_if_index : InterfaceIndex, 
	pub hostname : FixedSizeString<typenum::U64>, 
	pub id : FixedSizeArray<u8, typenum::U64>, 
	pub want_dhcp_event : bool, 
	pub set_broadcast_flag : bool, 
	pub dscp : IpDscp, 
	pub pid : u32, 
} 
// Implementation for domain_server 
#[derive(Debug, Clone, Serialize, Deserialize, Default)] 
pub struct DomainServer { 
	pub address : Address, 
} 
// Implementation for dhcp_lease 
#[derive(Debug, Clone, Serialize, Deserialize, Default)] 
pub struct DhcpLease { 
	pub sw_if_index : InterfaceIndex, 
	pub state : DhcpClientState, 
	pub is_ipv6 : bool, 
	pub hostname : FixedSizeString<typenum::U64>, 
	pub mask_width : u8, 
	pub host_address : Address, 
	pub router_address : Address, 
	pub host_mac : MacAddress, 
	pub count : u8, 
	pub domain_server : VariableSizeArray<DomainServer>, 
} 
// Implementation for dhcp_server 
#[derive(Debug, Clone, Serialize, Deserialize, Default)] 
pub struct DhcpServer { 
	pub server_vrf_id : u32, 
	pub dhcp_server : Address, 
} 
// Implementation for dhcp6_address_info 
#[derive(Debug, Clone, Serialize, Deserialize, Default)] 
pub struct Dhcp6AddressInfo { 
	pub address : Ip6Address, 
	pub valid_time : u32, 
	pub preferred_time : u32, 
} 
// Implementation for dhcp6_pd_prefix_info 
#[derive(Debug, Clone, Serialize, Deserialize, Default)] 
pub struct Dhcp6PdPrefixInfo { 
	pub prefix : Ip6Prefix, 
	pub valid_time : u32, 
	pub preferred_time : u32, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum VssType { 
	 VSS_TYPE_API_ASCII=0, 
	 VSS_TYPE_API_VPN_ID=1, 
	 VSS_TYPE_API_INVALID=123, 
	 VSS_TYPE_API_DEFAULT=255, 
} 
impl Default for VssType { 
	fn default() -> Self { VssType::VSS_TYPE_API_ASCII }
}
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum DhcpClientState { 
	 DHCP_CLIENT_STATE_API_DISCOVER=1, 
	 DHCP_CLIENT_STATE_API_REQUEST=2, 
	 DHCP_CLIENT_STATE_API_BOUND=3, 
} 
impl Default for DhcpClientState { 
	fn default() -> Self { DhcpClientState::DHCP_CLIENT_STATE_API_DISCOVER }
}
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum Dhcpv6MsgType { 
	 DHCPV6_MSG_API_SOLICIT=1, 
	 DHCPV6_MSG_API_ADVERTISE=2, 
	 DHCPV6_MSG_API_REQUEST=3, 
	 DHCPV6_MSG_API_CONFIRM=4, 
	 DHCPV6_MSG_API_RENEW=5, 
	 DHCPV6_MSG_API_REBIND=6, 
	 DHCPV6_MSG_API_REPLY=7, 
	 DHCPV6_MSG_API_RELEASE=8, 
	 DHCPV6_MSG_API_DECLINE=9, 
	 DHCPV6_MSG_API_RECONFIGURE=10, 
	 DHCPV6_MSG_API_INFORMATION_REQUEST=11, 
	 DHCPV6_MSG_API_RELAY_FORW=12, 
	 DHCPV6_MSG_API_RELAY_REPL=13, 
} 
impl Default for Dhcpv6MsgType { 
	fn default() -> Self { Dhcpv6MsgType::DHCPV6_MSG_API_SOLICIT }
}
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_plugin_get_version_51077d14)] 
pub struct DhcpPluginGetVersion { 
	pub client_index : u32, 
	pub context : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_plugin_get_version_reply_9b32cf86)] 
pub struct DhcpPluginGetVersionReply { 
	pub context : u32, 
	pub major : u32, 
	pub minor : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_plugin_control_ping_51077d14)] 
pub struct DhcpPluginControlPing { 
	pub client_index : u32, 
	pub context : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_plugin_control_ping_reply_f6b0b8ca)] 
pub struct DhcpPluginControlPingReply { 
	pub context : u32, 
	pub retval : i32, 
	pub client_index : u32, 
	pub vpe_pid : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_proxy_config_4058a689)] 
pub struct DhcpProxyConfig { 
	pub client_index : u32, 
	pub context : u32, 
	pub rx_vrf_id : u32, 
	pub server_vrf_id : u32, 
	pub is_add : bool, 
	pub dhcp_server : Address, 
	pub dhcp_src_address : Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_proxy_config_reply_e8d4e804)] 
pub struct DhcpProxyConfigReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_proxy_set_vss_50537301)] 
pub struct DhcpProxySetVss { 
	pub client_index : u32, 
	pub context : u32, 
	pub tbl_id : u32, 
	pub vss_type : VssType, 
	pub vpn_ascii_id : FixedSizeString<typenum::U129>, 
	pub oui : u32, 
	pub vpn_index : u32, 
	pub is_ipv6 : bool, 
	pub is_add : bool, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_proxy_set_vss_reply_e8d4e804)] 
pub struct DhcpProxySetVssReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_client_config_1af013ea)] 
pub struct DhcpClientConfig { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub client : DhcpClient, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_client_config_reply_e8d4e804)] 
pub struct DhcpClientConfigReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_compl_event_554a44e5)] 
pub struct DhcpComplEvent { 
	pub client_index : u32, 
	pub pid : u32, 
	pub lease : DhcpLease, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_client_dump_51077d14)] 
pub struct DhcpClientDump { 
	pub client_index : u32, 
	pub context : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_client_details_3c5cd28a)] 
pub struct DhcpClientDetails { 
	pub context : u32, 
	pub client : DhcpClient, 
	pub lease : DhcpLease, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_proxy_dump_5c5b063f)] 
pub struct DhcpProxyDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_ip6 : bool, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp_proxy_details_dcbaf540)] 
pub struct DhcpProxyDetails { 
	pub context : u32, 
	pub rx_vrf_id : u32, 
	pub vss_oui : u32, 
	pub vss_fib_id : u32, 
	pub vss_type : VssType, 
	pub is_ipv6 : bool, 
	pub vss_vpn_ascii_id : FixedSizeString<typenum::U129>, 
	pub dhcp_src_address : Address, 
	pub count : u8, 
	pub servers : VariableSizeArray<DhcpServer>, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp6_duid_ll_set_0f6ca323)] 
pub struct Dhcp6DuidLlSet { 
	pub client_index : u32, 
	pub context : u32, 
	pub duid_ll : FixedSizeArray<u8, typenum::U10>, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp6_duid_ll_set_reply_e8d4e804)] 
pub struct Dhcp6DuidLlSetReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp6_clients_enable_disable_b3e225d2)] 
pub struct Dhcp6ClientsEnableDisable { 
	pub client_index : u32, 
	pub context : u32, 
	pub enable : bool, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp6_clients_enable_disable_reply_e8d4e804)] 
pub struct Dhcp6ClientsEnableDisableReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp6_send_client_message_f8222476)] 
pub struct Dhcp6SendClientMessage { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub server_index : u32, 
	pub irt : u32, 
	pub mrt : u32, 
	pub mrc : u32, 
	pub mrd : u32, 
	pub stop : bool, 
	pub msg_type : Dhcpv6MsgType, 
	pub T1 : u32, 
	pub T2 : u32, 
	pub n_addresses : u32, 
	pub addresses : VariableSizeArray<Dhcp6AddressInfo>, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp6_send_client_message_reply_e8d4e804)] 
pub struct Dhcp6SendClientMessageReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp6_pd_send_client_message_3739fd8d)] 
pub struct Dhcp6PdSendClientMessage { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub server_index : u32, 
	pub irt : u32, 
	pub mrt : u32, 
	pub mrc : u32, 
	pub mrd : u32, 
	pub stop : bool, 
	pub msg_type : Dhcpv6MsgType, 
	pub T1 : u32, 
	pub T2 : u32, 
	pub n_prefixes : u32, 
	pub prefixes : VariableSizeArray<Dhcp6PdPrefixInfo>, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp6_pd_send_client_message_reply_e8d4e804)] 
pub struct Dhcp6PdSendClientMessageReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(want_dhcp6_reply_events_05b454b5)] 
pub struct WantDhcp6ReplyEvents { 
	pub client_index : u32, 
	pub context : u32, 
	pub enable_disable : u8, 
	pub pid : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(want_dhcp6_reply_events_reply_e8d4e804)] 
pub struct WantDhcp6ReplyEventsReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(want_dhcp6_pd_reply_events_c5e2af94)] 
pub struct WantDhcp6PdReplyEvents { 
	pub client_index : u32, 
	pub context : u32, 
	pub enable_disable : bool, 
	pub pid : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(want_dhcp6_pd_reply_events_reply_e8d4e804)] 
pub struct WantDhcp6PdReplyEventsReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp6_reply_event_85b7b17e)] 
pub struct Dhcp6ReplyEvent { 
	pub client_index : u32, 
	pub pid : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub server_index : u32, 
	pub msg_type : Dhcpv6MsgType, 
	pub T1 : u32, 
	pub T2 : u32, 
	pub inner_status_code : u16, 
	pub status_code : u16, 
	pub preference : u8, 
	pub n_addresses : u32, 
	pub addresses : VariableSizeArray<Dhcp6AddressInfo>, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, VppMessage)] 
#[message_name_and_crc(dhcp6_pd_reply_event_5e878029)] 
pub struct Dhcp6PdReplyEvent { 
	pub client_index : u32, 
	pub pid : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub server_index : u32, 
	pub msg_type : Dhcpv6MsgType, 
	pub T1 : u32, 
	pub T2 : u32, 
	pub inner_status_code : u16, 
	pub status_code : u16, 
	pub preference : u8, 
	pub n_prefixes : u32, 
	pub prefixes : VariableSizeArray<Dhcp6PdPrefixInfo>, 
} 
