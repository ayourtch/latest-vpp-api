/*
   Autogenerated Data, Do not Edit! 
*/
#![allow(dead_code,unused_mut,unused_variables,unused_must_use,non_camel_case_types,unused_imports,non_snake_case)]
use vpp_api_macros::{VppMessage,VppUnionIdent}; 
use std::convert::TryInto; 
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum;
// Implementation for nat_timeouts 
#[derive(Debug, Clone, Serialize, Deserialize, Default)] 
pub struct NatTimeouts { 
	pub udp : u32, 
	pub tcp_established : u32, 
	pub tcp_transitory : u32, 
	pub icmp : u32, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum NatLogLevel { 
	 NAT_LOG_NONE=0, 
	 NAT_LOG_ERROR=1, 
	 NAT_LOG_WARNING=2, 
	 NAT_LOG_NOTICE=3, 
	 NAT_LOG_INFO=4, 
	 NAT_LOG_DEBUG=5, 
} 
impl Default for NatLogLevel { 
	fn default() -> Self { NatLogLevel::NAT_LOG_NONE }
}
#[derive(Debug,Serialize, Deserialize, Clone, Copy)] 
pub enum NatConfigFlags { 
	 NAT_IS_NONE=0, 
	 NAT_IS_TWICE_NAT=1, 
	 NAT_IS_SELF_TWICE_NAT=2, 
	 NAT_IS_OUT2IN_ONLY=4, 
	 NAT_IS_ADDR_ONLY=8, 
	 NAT_IS_OUTSIDE=16, 
	 NAT_IS_INSIDE=32, 
	 NAT_IS_STATIC=64, 
	 NAT_IS_EXT_HOST_VALID=128, 
} 
impl Default for NatConfigFlags { 
	fn default() -> Self { NatConfigFlags::NAT_IS_NONE }
}
impl AsEnumFlag for NatConfigFlags {
	 fn as_u32(data: &Self) -> u32{
		 *data as u32
	 }
	 fn from_u32(data: u32) -> Self{
		 match data{
			 0 => NatConfigFlags::NAT_IS_NONE, 
			 1 => NatConfigFlags::NAT_IS_TWICE_NAT, 
			 2 => NatConfigFlags::NAT_IS_SELF_TWICE_NAT, 
			 4 => NatConfigFlags::NAT_IS_OUT2IN_ONLY, 
			 8 => NatConfigFlags::NAT_IS_ADDR_ONLY, 
			 16 => NatConfigFlags::NAT_IS_OUTSIDE, 
			 32 => NatConfigFlags::NAT_IS_INSIDE, 
			 64 => NatConfigFlags::NAT_IS_STATIC, 
			 128 => NatConfigFlags::NAT_IS_EXT_HOST_VALID, 
			_ => panic!("Invalid Enum Descriminant")
		 }
	 }
	 fn size_of_enum_flag() -> u32{
		 8 as u32
	}
}
